<!DOCTYPE html>
<html lang="en" data-bs-theme="light">

<head>
	<title>mixedGame</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet"
		integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9" crossorigin="anonymous">
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"
		integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm"
		crossorigin="anonymous"></script>
	<script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
	<link href='https://fonts.googleapis.com/css?family=Aldrich' rel='stylesheet'>
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<script>
		// 내 닉네임
		let nickname;
		// 현재 내가 어느 채팅방인가. 다른 채팅방에 들어갈 때, 현재 방을 나가기 위해 사용하는 변수
		let chatRoomKey = false;
		let CAChatRoomKey = false;
		//여기부터는 크아를 위한 변수
		let can;        //canvas 객체
		let ctx;        //context객체를 얻어야 drawimage와 filltext를 할 수 있음
		let inGame = false; //현재 게임 진행중인가 변수
		let mainInterval;   //interval변수
		let receiveFlag = true;    //서버로부터 정보를 받았는지 확인하는 플래그. true라면 서버에 정보를 전송, 아니라면 전송하지 않는다.
		let keyBoard = { '37': false, '38': false, '39': false, '40': false, '32': false };//키보드를 입력했는지 아닌지 확인하는 오브젝트
		const mapConst = { MAPHEIGHT: 13, MAPWIDTH: 15, HEIGHTGAP: 41, WIDTHGAP: 20 };	//게임 상수들
		let mapData; //게임 데이터. 0빈칸 a빨강블럭 b주황블럭 c크아박스 A집1 B집2 C나무
		const bg = { bgImage1: undefined, bgImage2: undefined, winImage: undefined, closeTime: 0 }; //배경 이미지 저장변수
		//character는 서버로부터 nickname(name):value를 받아서 해당 property를 추가한다.
		const character = { leftImage: [], upImage: [], rightImage: [], downImage: [], inWaterBalloonImage: [], deadImage: [], nicknames: [] };
		const hardBlock = { house1: undefined, house2: undefined, tree: undefined, info: make2DemensionArray(mapConst.MAPWIDTH, mapConst.MAPHEIGHT) }; //안깨지는 블럭
		const softBlock = {
			redBlock: undefined, redBlockPop1: undefined, redBlockPop2: undefined, orangeBlock: undefined,
			orangeBlockPop1: undefined, orangeBlockPop2: undefined, brownBlock: undefined, brownBlockPop1: undefined, brownBlockPop2: undefined,
			info: make2DemensionArray(mapConst.MAPWIDTH, mapConst.MAPHEIGHT), //무슨 블록인지 저장
			item: make2DemensionArray(mapConst.MAPWIDTH, mapConst.MAPHEIGHT), //아이템 정보를 저장
			pop: make2DemensionArray(mapConst.MAPWIDTH, mapConst.MAPHEIGHT), //터지는중이면1 터졌거나 멀쩡하면 0
			poptime: make2DemensionArray(mapConst.MAPWIDTH, mapConst.MAPHEIGHT) //poptime보다 커지면 터지게 한다.
		}; //깨지는 블럭
		const itemBlock = {
			speed1: undefined, speed2: undefined, waterLength1: undefined, waterLength2: undefined,
			waterBalloon1: undefined, waterBalloon2: undefined,
			info: make2DemensionArray(mapConst.MAPWIDTH, mapConst.MAPHEIGHT),
			time: make2DemensionArray(mapConst.MAPWIDTH, mapConst.MAPHEIGHT)	//아이템 시간. 반짝이게 보이게 위해 필요한 변수
		}; //아이템 블럭
		const waterBalloonBlock = {
			img: [], leftBoom: [], upBoom: [], rightBoom: [], downBoom: [], midBoom: [],
			//더 추가해야 함
		}; //물풍선 블럭
		$(document).ready(() => {
			$("#chatText").keydown(function (key) {
				if (key.keyCode == 13) {
					sendChat();
				}
			});
			$("#CAChatText").keydown(function (key) {
				if (key.keyCode == 13) {
					sendCAChat();
				}
			});
			$('#btnMakeChatRoom').click(() => {
				$.ajax({
					url: "/makeNewChatRoom",
					type: "post",
					data: {
						chatRoomName: $('#chatRoomName').val()
					},
					success: function (key) {
						console.log(key);
						accessChatRoom(key, $('#chatRoomName').val());
					},
					error: function (error) {
						console.log(error);
					}
				});
			});
			$('#btnMakeChatCARoom').click(() => {
				//크아방 만들기 버튼 눌렀다면
				$.ajax({
					url: "/makeNewChatCARoom",
					type: "post",
					data: {
						chatCARoomName: $('#chatCARoomName').val()
					},
					success: function (key) {
						console.log(key);
						accessCAChatRoom(key, $('#chatCARoomName').val());
					},
					error: function (error) {
						console.log(error);
					}
				});
			});
			beforeGameInitialize();
		})
		let socket = io();
		// 채팅방 접속중이라는것을 알림
		socket.emit("indexPage");
		// 채팅방 접속중 사람들을 알려달라.
		socket.emit("request onlineChatNicknames")
		// 채팅방 방 리스트를 가져다 달라.
		socket.emit("request chatRoomList");
		// 크아 채팅방 리스트를 가져다 달라.
		socket.emit("request CAChatRoomList");
		socket.on('yourNickname', (yourNickname) => {
			nickname = yourNickname;
		})
		socket.on('disconnect', () => {
			alert('연결이 끊겼습니다');
			location.href = '/';
		})
		socket.on('alert', (msg) => {
			alert(msg);
		})
		socket.on("response onlineChatNicknames", (nicknames) => {
			$('#onlineChatNicknames').empty();
			Array.from(nicknames).forEach((nickname, index) => {
				//$('#onlineChatNicknames').append(`<p onclick="inviteChatRoom('${nickname}')">${nickname}</p>`);
				$('#onlineChatNicknames').append(`<div class="dropdown">
		<button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
			${nickname}</button>
		<ul class="dropdown-menu">
			<li><a class="dropdown-item" onclick="inviteChatRoom('${nickname}')">채팅방 초대하기</a></li>
		</ul>
	</div>`);
			})
		})
		socket.on("response chatRoomList", (obj) => {
			$('#chatRoomNames').empty();
			for (const [key, val] of Object.entries(obj)) {
				$('#chatRoomNames').append(`<tr onclick="accessChatRoom('${key}', '${val.name}')"><td scope="row">${val.population}</td><td>${val.name}</td></tr>`);
			}

		})
		socket.on("response CAChatRoomList", (obj) => {
			$('#CARoomNames').empty();
			for (const [key, val] of Object.entries(obj)) {
				$('#CARoomNames').append(`<tr onclick="accessCAChatRoom('${key}', '${val.name}')"><td scope="row">${val.population}</td><td>${val.name}</td></tr>`);
			}
		})
		socket.on('chat message', (msg) => {
			$('#chatting').append(`<li class="list-group-item">${msg}</li>`);
			$('#showChat').scrollTop($('#showChat')[0].scrollHeight);
		})
		socket.on('CAChat message', (msg) => {
			$('#CAChatting').append(`<li class="list-group-item">${msg}</li>`);
			$('#CAChatDiv').scrollTop($('#CAChatDiv')[0].scrollHeight);
		})
		socket.on('inviteChatRoom', (who, key, name) => {
			//data는 who, key, name으로 구성되어야 한다.
			$('#toasts').append(`<div id="liveToast" class="toast fade show" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-body">
            ${who}이/가 '${name}' 채팅방에 초대했습니다.
            <div class="mt-2 pt-2 border-top">
                <button type="button" class="btn btn-primary btn-sm" data-bs-dismiss="toast" onclick="accessChatRoom('${key}', '${name}');">수락</button>
                <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="toast">거절</button>
            </div>
        </div>
    </div>`);
		})
		socket.on('inviteCAChatRoom', (who, key, name) => {
			//data는 who, key, name으로 구성되어야 한다.
			$('#toasts').append(`<div id="liveToast" class="toast fade show" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-body">
            ${who}이/가 '${name}' 채팅방에 초대했습니다.
            <div class="mt-2 pt-2 border-top">
                <button type="button" class="btn btn-primary btn-sm" data-bs-dismiss="toast" onclick="accessCAChatRoom('${key}', '${name}');">수락</button>
                <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="toast">거절</button>
            </div>
        </div>
    </div>`);
		})
		socket.on('CAChatRoomJoinSucess', (key, name) => {
			exitCurrentRoom();
			showCADiv();
			CAChatRoomKey = key;
			$('#chatCARoomTitle').text(name);
			$('#CAChatting').empty();
		})
		socket.on('CARoomInfo', (infoObj) => {
			$('#CAUserInfo').empty();
			const infoList = Object.entries(infoObj);
			for (let i = 0; i < infoList.length; i++) {
				let [nickname, val] = infoList[i];
				if (i == 0) {
					$('#CAUserInfo').append(`<img class="position-absolute" style="top:140px;left:55px;" src="/images/bazzi/배찌31.png">`);
					$('#CAUserInfo').append(`<h6 class="position-absolute text-white" style="top:215px;left:33px;">${nickname}</h6>`);
					$('#CAUserInfo').append(`<h6 class="position-absolute text-warning" style="top:235px;left:33px;">${val.ready ? '준비완료' : '준비중'}</h6>`);
				}
				else if (i == 1) {
					$('#CAUserInfo').append(`<img class="position-absolute" style="top:140px;left:160px;" src="/images/bazzi/배찌31.png">`);
					$('#CAUserInfo').append(`<h6 class="position-absolute text-white" style="top:215px;left:138px;">${nickname}</h6>`);
					$('#CAUserInfo').append(`<h6 class="position-absolute text-warning" style="top:235px;left:138px;">${val.ready ? '준비완료' : '준비중'}</h6>`);
				}
			}
			console.log(infoObj);
		})
		socket.on('gameStart', (infoObj) => {
			$('#beforeGame').hide();
			$('#can').show();
			$('#can').focus();
			inGame = true;
			gameInitialize(Object.keys(infoObj));
		})
		socket.on('CAKeyboardData', (roomInfoObj) => {
			receiveFlag = true;
			oneFrame(roomInfoObj);
		})
		function inviteChatRoom(nickname) {
			if (!chatRoomKey && !CAChatRoomKey) {
				alert('현재 채팅방에 참여하지 않았습니다.');
			}
			else if (chatRoomKey) {
				socket.emit('inviteChatRoom', nickname, chatRoomKey, $('#chatRoomTitle').html());
				$('#chatting').append(`<li class="list-group-item">${nickname}을/를 초대했습니다.</li>`);
			}
			else if (CAChatRoomKey) {
				socket.emit('inviteCAChatRoom', nickname, CAChatRoomKey, $('#chatCARoomTitle').html());
				$('#CAChatting').append(`<li class="list-group-item">${nickname}을/를 초대했습니다.</li>`);
			}
		}
		function exitCurrentRoom() {
			if (chatRoomKey) {
				socket.emit("exitChatRoom", chatRoomKey);
				chatRoomKey = false;
			}
			else if (CAChatRoomKey) {
				socket.emit("exitCAChatRoom", CAChatRoomKey);
				CAChatRoomKey = false;
			}
		}
		function showMakeRoom() {
			$('.rightDiv').hide();
			$('#showMakeRoom').show();
			//현재 참여중인 채팅방이 있다면, 채팅방을 나간다.
			exitCurrentRoom();
		}
		function showMakeCARoom() {
			$('.rightDiv').hide();
			$('#showMakeCARoom').show();
			exitCurrentRoom();
		}
		function showChat() {
			$('.rightDiv').hide();
			$('#showChat').show();
		}
		function showCADiv() {
			$('.rightDiv').hide();
			$('#CADiv').show();
		}
		function accessChatRoom(key, name) {
			if (key === chatRoomKey) return;
			showChat();
			exitCurrentRoom();
			socket.emit("joinChatRoom", key);
			chatRoomKey = key;
			$('#chatRoomTitle').text(name);
			$('#chatting').empty();
		}
		function accessCAChatRoom(key, name) {
			if (key === CAChatRoomKey) return;
			socket.emit("joinCAChatRoom", key, name);
			//성공: CAChatRoomJoinSucess, 실패: alert
		}
		function sendChat() {
			if ($('#chatText').val() != '') {
				socket.emit('chat message', chatRoomKey, $('#chatText').val());
				$('#chatText').val(``);
			}
		}
		function sendCAChat() {
			if ($('#CAChatText').val() != '') {
				socket.emit('CAChat message', CAChatRoomKey, $('#CAChatText').val());
				$('#CAChatText').val(``);
			}
			else if (inGame) {
				$('#can').focus();
			}
		}
		function iAmReady() {
			//크아 게임할 준비가 돼었다.
			socket.emit('iAmReady', CAChatRoomKey);
		}
		function makeImage(source) {
			const img = new Image();
			img.src = source;
			return img;
		}
		function beforeGameInitialize() {
			can = document.getElementById("can");
			ctx = can.getContext("2d");
			//bg 이미지
			bg.bgImage1 = makeImage('/images/map/크아인게임.png');
			bg.bgImage2 = makeImage('/images/map/크아배경1.png');
			bg.winImage = makeImage('/images/map/win.png');
			//캐릭터 이미지
			for (let i = 1; i < 7; i++) {
				character.leftImage.push(makeImage(`/images/bazzi/배찌0${i}.png`));
				character.upImage.push(makeImage(`/images/bazzi/배찌1${i}.png`));
				character.rightImage.push(makeImage(`/images/bazzi/배찌2${i}.png`));
				character.downImage.push(makeImage(`/images/bazzi/배찌3${i}.png`));
			}
			character.inWaterBalloonImage.push(makeImage(`/images/bazzi/inWaterBalloon1.png`));
			character.inWaterBalloonImage.push(makeImage(`/images/bazzi/inWaterBalloon2.png`));
			character.deadImage.push(makeImage(`/images/bazzi/dead.png`));
			character.deadImage.push(makeImage(`/images/bazzi/dead.png`));
			//하드 블럭 이미지
			hardBlock.house1 = makeImage('/images/hardBlock/house1.png');
			hardBlock.house2 = makeImage('/images/hardBlock/house2.png');
			hardBlock.tree = makeImage('/images/hardBlock/tree.png');
			//소프트 블럭 이미지
			softBlock.redBlock = makeImage('/images/softBlock/redBlock.png');
			softBlock.redBlockPop1 = makeImage('/images/softBlock/redBlockPop1.png');
			softBlock.redBlockPop2 = makeImage('/images/softBlock/redBlockPop2.png');
			softBlock.orangeBlock = makeImage('/images/softBlock/orangeBlock.png');
			softBlock.orangeBlockPop1 = makeImage('/images/softBlock/orangeBlockPop1.png');
			softBlock.orangeBlockPop2 = makeImage('/images/softBlock/orangeBlockPop2.png');
			softBlock.brownBlock = makeImage('/images/softBlock/brownBlock.png');
			softBlock.brownBlockPop1 = makeImage('/images/softBlock/brownBlockPop1.png');
			softBlock.brownBlockPop2 = makeImage('/images/softBlock/brownBlockPop2.png');
			//아이템 블럭 이미지
			itemBlock.speed1 = makeImage('/images/item/speed1.png');
			itemBlock.speed2 = makeImage('/images/item/speed2.png');
			itemBlock.waterBalloon1 = makeImage('/images/item/waterBalloon1.png');
			itemBlock.waterBalloon2 = makeImage('/images/item/waterBalloon2.png');
			itemBlock.waterLength1 = makeImage('/images/item/waterLength1.png');
			itemBlock.waterLength2 = makeImage('/images/item/waterLength2.png');
			//물풍선 이미지
			for (let i = 0; i < 8; i++)
				waterBalloonBlock.img.push(makeImage(`/images/waterBalloon/waterBalloon${i}.png`));
			waterBalloonBlock.leftBoom.push(makeImage(`/images/waterBalloon/left펑1.png`));
			waterBalloonBlock.leftBoom.push(makeImage(`/images/waterBalloon/left펑2.png`));
			waterBalloonBlock.rightBoom.push(makeImage(`/images/waterBalloon/right펑1.png`));
			waterBalloonBlock.rightBoom.push(makeImage(`/images/waterBalloon/right펑2.png`));
			waterBalloonBlock.upBoom.push(makeImage(`/images/waterBalloon/up펑1.png`));
			waterBalloonBlock.upBoom.push(makeImage(`/images/waterBalloon/up펑2.png`));
			waterBalloonBlock.downBoom.push(makeImage(`/images/waterBalloon/down펑1.png`));
			waterBalloonBlock.downBoom.push(makeImage(`/images/waterBalloon/down펑2.png`));
			waterBalloonBlock.midBoom.push(makeImage(`/images/waterBalloon/mid펑1.png`));
			waterBalloonBlock.midBoom.push(makeImage(`/images/waterBalloon/mid펑2.png`));
			//맵 데이터 삽입. 0빈칸 a빨강블럭 b주황블럭 c크아박스 A집1 B집2 C나무
			mapData=[
			'CCCCCCCCCCCCCCC',
			'C000aC0C0Ca000C',
			'C0CAbC0C0CbAC0C',
			'CbababababababC',
			'CBbCbAaAaCbBbCC',
			'Cbabab000bababC',
			'CCbAaB000BaCbBC',
			'Cbabab000bababC',
			'CCbBbAbBbCbCbBC',
			'CbababababababC',
			'C0CAbC0C0CbBC0C',
			'C000aC0C0Ca000C',
			'CCCCCCCCCCCCCCC'
			];
			//키다운 키업 이벤트리스너 등록
			$('#can').keydown((e) => {
				keyBoard[e.keyCode] = true;
				if (e.keyCode == 13 && inGame)
					$('#CAChatText').focus();
			})
			$('#can').keyup((e) => { keyBoard[e.keyCode] = false; })
		}
		function make2DemensionArray(x, y) {
			return Array.from(Array(y), () => new Array(x));
		}
		function gameInitialize(nicknames) {
			//캐릭터를 초기화한다.
			character.nicknames = nicknames;
			nicknames.forEach((nickname, index) => {
				character[nickname] = {
					inWaterBalloon: false, inWaterBalloonTime: 0,
					dead: false, sight: 'down',
					walkingTime: 0, speed: 1,
					waterballoonSize: 1,	//물줄기 길이
					waterballoonMaxNum: 1,	//최대 물풍선 개수
					waterballoonNum: 0,	//현재 물풍선 개수
					waterballoonCount: 0	//waterballoon에게 넘겨줄 번호. 0~99로 물풍선 놓을 때마다 1씩 커짐.
				}
				if (index === 0) {
					character[nickname].x = 40; character[nickname].y = 40;
				}
				else if (index === 1) {
					character[nickname].x = 40 * 13; character[nickname].y = 40 * 11;
				}
			})
			//블럭들 초기화
			for(let y=0; y<mapData.length; y++) {
				for(let x=0; x<mapData[y].length; x++) {
					
				}
			}
			mainInterval = setInterval(sendData, 20);
		}
		function sendData() {
			if (receiveFlag === true) {
				const keyBoardDataObj = { left: keyBoard[37], up: keyBoard[38], right: keyBoard[39], down: keyBoard[40], space: keyBoard[32] };
				socket.emit('keyBoardData', CAChatRoomKey, keyBoardDataObj);
				receiveFlag = false;
			}
		}
		function oneFrame(roomInfoObj) {
			//여기에 데이터를 이용해 한 프레임을 담당하는 것을 진행해야 한다.
			gameLogic(roomInfoObj);
			gameDraw();
		}
		let temproomInfoObj;
		function gameLogic(roomInfoObj) {
			temproomInfoObj = roomInfoObj;
		}
		function gameDraw() {
			//배경 그리기
			ctx.drawImage(bg.bgImage1, 0, 0);
			ctx.drawImage(bg.bgImage2, mapConst.WIDTHGAP, mapConst.HEIGHTGAP);
			//softBlock, hardBlock, itemBlock, waterBalloonBlock, chracter그리기
			//딱 40x40으로 그리는게 아니라, 키큰건 40픽셀을 넘게 그려야 하므로 같은 y좌표것을 먼저 그린다.
			let chatacterY = {};
			character.nicknames.forEach((nickname) => {
				chatacterY[nickname] = Math.floor((character[nickname].y + 19) / 40);
			})
			for (let y = 0; y < mapConst.MAPHEIGHT; y++) {
				for (let x = 0; x < mapConst.MAPWIDTH; x++) {

				}
				character.nicknames.forEach((nickname) => {
					if (chatacterY[nickname] == y)
						drawCharacter(nickname);
				})
			}
			ctx.font = "15px Arial";
			ctx.fillText(JSON.stringify(temproomInfoObj), 10, 150);
		}
		function drawCharacter(nickname) {
			let frame = (int)(character[nickname].walkingTime * 10) % 6;
			ctx.drawImage(character.downImage[frame], mapConst.WIDTHGAP + character[nickname].x,
				mapConst.HEIGHTGAP + character[nickname].y - (character.downImage[frame].height - 40));
		}
	</script>
</head>

<body>
	<div class="main-wrapper" style="height: 100vh">
		<div
			class="d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white border-bottom shadow-sm">
			<a class="my-0 mr-md-auto font-weight-normal text-dark" href="/">Home</a>
			<nav class="my-2 my-md-0 mr-md-3">
				<%- navText %>
			</nav>
		</div>
		<div class="row h-75 w-100">
			<div class="col-3 border mh-100 overflow-auto">
				<h4>접속중</h4>
				<hr>
				<div id="onlineChatNicknames">
					<p>김치찌개</p>
					<p>관리자</p>
					<p>고리</p>
				</div>
				<hr>
				<h4>
					채팅방
					<input type="button" class="btn btn-success" value="방만들기" onclick="showMakeRoom()">
				</h4>
				<div>
					<table class="table table-bordered table-striped">
						<thead>
							<th scope="col">인원</th>
							<th scope="col">이름</th>
						</thead>
						<tbody id="chatRoomNames">
						</tbody>
					</table>
				</div>
				<hr>
				<h4>
					크아방
					<input type="button" class="btn btn-success" value="크아방만들기" onclick="showMakeCARoom()">
				</h4>
				<table class="table table-bordered table-striped">
					<thead>
						<th scope="col">인원</th>
						<th scope="col">이름</th>
					</thead>
					<tbody id="CARoomNames">
					</tbody>
				</table>
			</div>
			<div class="col border rightDiv" id="showMakeRoom">
				<h3>채팅방 만들기</h3>
				<hr>
				<label for="chatRoomName">이름:</label>
				<input type="text" id="chatRoomName" maxlength="20">
				<input type="button" class="btn btn-success" value="만들기" id="btnMakeChatRoom">
			</div>
			<div class="col border rightDiv mh-100 overflow-auto" id="showChat" style="display:none;">
				<h4 id="chatRoomTitle">채팅방이름</h4>
				<hr>
				<ul class="list-group" id="chatting">
					<li class="list-group-item">채팅예시</li>
				</ul>
				<hr>
				<input type="text" class="form-control" id="chatText" placeholder="채팅" maxlength="20" required>
				<input type="button" class="btn btn-success" value="보내기" id="sendChat" onclick="sendChat()">
			</div>
			<div class="col border rightDiv" id="showMakeCARoom" style="display:none;">
				<h3>크레이지아케이드 방 만들기</h3>
				<hr>
				<label for="chatCARoomName">이름:</label>
				<input type="text" id="chatCARoomName" maxlength="20">
				<input type="button" class="btn btn-success" value="크아방 만들기" id="btnMakeChatCARoom">
			</div>
			<div class="col border rightDiv mh-100 overflow-auto" id="CADiv" style="display:none;">
				<div class="position-relative" id="beforeGame">
					<img src="/images/map/크아대기실.png">
					<img class="position-absolute" style="top:495px;left:513px;" src="/images/map/시작.gif"
						onclick="iAmReady()">
					<h5 id="chatCARoomTitle" class="position-absolute" style="top:60px;left:90px;">크아채팅방이름</h5>
					<div id="CAUserInfo">

					</div>
					<div class="position-absolute overflow-auto" id="CAChatDiv"
						style="top:300px;left:20px;max-width:550px;max-height:250px;">
						<ul class="list-group" id="CAChatting">
							<li class="list-group-item">크아채팅예시</li>
						</ul>
					</div>
				</div>
				<canvas id="can" width="800" height="600" style="display: none;" tabindex='1'></canvas>
				<input type="text" class="form-control" id="CAChatText" placeholder="채팅" maxlength="20" required>
				<!--input type="button" class="btn btn-success" value="보내기" id="sendChat" onclick="sendCAChat()"-->
			</div>
		</div>
		<div id="toasts" class="toast-container bottom-0 end-0 p-2">
		</div>
	</div>
</body>

</html>